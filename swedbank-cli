#!/usr/bin/env python
import getpass
import re
import sys
import pycurl
from optparse import OptionParser

class swedbank:
    def __init__(self):
        """ Set default stuff to pycurl"""
        headers = ['Accept-Language: en-us,en;q=0.5', 'Accept-Encoding: gzip,deflate', 'Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7', 'Keep-Alive: 300', 'Connection: Keep-Alive']
        useragent = "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3"
        self.data = ""
        self.pch = pycurl.Curl()
        self.pch.setopt(pycurl.HTTPHEADER, headers)
        self.pch.setopt(pycurl.USERAGENT, useragent)
        self.pch.setopt(pycurl.VERBOSE, 0)
        self.pch.setopt(pycurl.WRITEFUNCTION, self.writedata)
        self.pch.setopt(pycurl.COOKIEFILE, 'cookies.txt')
        
    def request(self, url, post):
        """ Make the request"""
        self.pch.setopt(pycurl.URL, url)
        
        if post:
            self.pch.setopt(pycurl.POSTFIELDS, post)
            self.pch.setopt(pycurl.POST, 1)
        else:
            self.pch.setopt(pycurl.POST, 0)

        self.pch.perform()

    def login(self, user, passwd):
        """ Login """
        self.request("https://mobilbank.swedbank.se/banking/swedbank/login.html", "")
        data = re.search("csrf_token\".*?value=\"([^\"]+)\"", self.getdata())

        if not data:
            return 0

        token = data.group(1)
        self.rstdata()
        params = "auth-method=code&xyz=" + user + "&_csrf_token=" + token
        self.request("https://mobilbank.swedbank.se/banking/swedbank/loginNext.html", params)
        data = re.search("csrf_token\".*?value=\"([^\"]+)\"", self.getdata())

        if not data:
            return 0

        token = data.group(1)
        params = "zyx=" + passwd + "&_csrf_token=" + token
        self.rstdata()
        self.request("https://mobilbank.swedbank.se/banking/swedbank/login.html", params)
        
        if not re.search("misslyckats", self.getdata()):
            return 1
        else:
            print "Wrong username/password"
            return 0
        
    def accounts(self, which):
        """ Accounts """
        self.request("https://mobilbank.swedbank.se/banking/swedbank/accounts.html","")
        if which == -1:
            match = re.finditer("""
                <dd\ class="[^"]*"> .*?
                     <span\ class="name">([^<]+)</span> .*?
                     <span\ class="amount">([^<]+)</span> .*?
                </dd>
            """, self.getdata(), re.X | re.S)
            for i in match:
                print i.groups()[0] + " " + i.groups()[1]
        else:
            match = re.findall("(account|loan)\\.html\\?id=([^\"]+)\"[^>]*>\\s*(?:<span\\sclass=\"icon\">[^<]*</span>\\s*)?<span\\s*class=\"name\">([^<]+)</span>\\s*(?:<br/>\\s*)?<span\\s*class=\"amount\">([^<]+)</", self.getdata())
            try:
                print match[which][2] + " " + match[which][3]
            except IndexError:
                print "Can't find that account"
                sys.exit(1)

    def writedata(self, buf):
        """ Save the response """
        self.data += buf

    def getdata(self):
        """ Get the response data """
        return self.data

    def rstdata(self):
        """ Reset response"""
        self.data = ""

def main():
    """ Main """
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-u", "--username",
        metavar="username", help="Username")
    parser.add_option("-p", "--password",
        metavar="passwd", help="Password")
    parser.add_option("-a", "--account",
        metavar="account", help="Choose what account you want to see.\nDefault all")
    (options, args) = parser.parse_args()

    if not options.username:
        print "Missing username!"
        parser.print_help()
        sys.exit(1)
    else:
        username = options.username

    if options.password:
        password = options.password
    else:
        password = getpass.getpass()

    if not password:
        print "Missing password!"
        parser.print_help()
        sys.exit(1)

    if options.account:
        try:
            account = int(options.account)-1
        except ValueError:
            print "Account need to be a number."
            sys.exit(1)
    else:
        account = -1

    swed = swedbank()
    if swed.login(username, password):
        swed.accounts(account)

if __name__ == "__main__":
    main()
